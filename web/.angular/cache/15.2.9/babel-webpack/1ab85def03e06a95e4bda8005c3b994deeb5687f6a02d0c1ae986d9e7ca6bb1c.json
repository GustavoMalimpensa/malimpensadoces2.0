{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet FinalizeOrderComponent = class FinalizeOrderComponent {\n  constructor(carrinhoService, fb) {\n    this.carrinhoService = carrinhoService;\n    this.fb = fb;\n    this.metodoEntregaOpcao = 'entregar'; // Declare a variável\n    this.metodoPagamento = 'pix';\n    this.metodoEntrega = 'retirar';\n    this.enderecoEntrega = '';\n    this.dataHora = '';\n    this.numeroLoja = '+5519999372133';\n    this.produtosDoCarrinho = []; // Declare a propriedade produtosDoCarrinho aqui\n    this.tipoEntrega = ''; // Variável para armazenar o tipo de entrega\n    this.editandoHorario = false;\n    this.horarioPersonalizado = '';\n    this.totalCompra = 0;\n    this.valorEntrega = 0; // Inicialmente, o valor de entrega é 0\n    // Obtém a hora atual\n    const currentDate = new Date();\n    currentDate.setHours(currentDate.getHours() + 1);\n    // Formata a hora no formato 'hh:mm'\n    this.defaultHorario = this.formatHorario(currentDate);\n    //Validação entrega\n    this.form = this.fb.group({\n      tipoEntrega: ['', this.tipoEntregaValidator()],\n      enderecoEntrega: ['']\n    });\n  }\n  ngOnInit() {\n    // Obtenha os produtos do carrinho usando o serviço\n    this.produtosDoCarrinho = this.carrinhoService.obterProdutosDoCarrinho();\n  }\n  toggleEndereco() {\n    if (this.tipoEntrega === 'entregar') {\n      // Se a opção \"Entrega no Endereço\" estiver selecionada, mostre o campo de endereço\n      return true;\n    }\n    // Caso contrário, oculte o campo de endereço\n    return false;\n  }\n  tipoEntregaValidator() {\n    return control => {\n      const retirar = control.get('retirar').value;\n      const entregar = control.get('entregar').value;\n      if (!(retirar || entregar)) {\n        return {\n          tipoEntregaInvalido: true\n        };\n      }\n      return null;\n    };\n  }\n  calcularPrecoTotal() {\n    let total = 0;\n    for (const item of this.produtosDoCarrinho) {\n      total += item.price * item.quantidade;\n    }\n    return total;\n  }\n  calcularPrecoTotalFinal() {\n    let total = 0;\n    for (const item of this.produtosDoCarrinho) {\n      total += item.price * item.quantidade;\n    }\n    // Se a opção de entrega for \"entregar\", adicione o valor da entrega\n    if (this.tipoEntrega === 'entregar') {\n      total += this.valorEntrega;\n    }\n    return total;\n  }\n  // Função para formatar a hora\n  formatHorario(date) {\n    const hours = this.padZeroes(date.getHours());\n    const minutes = this.padZeroes(date.getMinutes());\n    return `${hours}:${minutes}`;\n  }\n  // Função auxiliar para adicionar zeros à esquerda\n  padZeroes(num) {\n    return num < 10 ? `0${num}` : `${num}`;\n  }\n  // Função para habilitar a edição do horário personalizado\n  editarHorario() {\n    this.editandoHorario = true;\n  }\n  //Construção do formulario para enviar\n  concluirCompra() {\n    if (this.produtosDoCarrinho.length === 0) {\n      return;\n    }\n    const itensPedido = this.produtosDoCarrinho.map(item => `${item.quantidade}x ${item.name} - R$${(item.price * item.quantidade).toFixed(2)}`).join(' | ');\n    const mensagem = `Olá, gostaria de realizar um pedido!\\n\\n` + `${itensPedido}\\n\\n` + `Ficando no Total: R$${this.calcularPrecoTotalFinal().toFixed(2)}.` + ` ------------\\n` + `O método de pagamento vai ser: ${this.metodoPagamento}, Método de entrega: ${this.metodoEntrega === 'retirar' ? 'Vou retirar o pedido' : 'Vou querer que entregue (' + this.enderecoEntrega + ')'}, as ${this.dataHora} horas.  Aguardo seu retorno!`;\n    const linkWhatsApp = `https://wa.me/${this.numeroLoja}?text=${encodeURIComponent(mensagem)}`;\n    window.open(linkWhatsApp, '_blank');\n  }\n};\nFinalizeOrderComponent = __decorate([Component({\n  selector: 'app-finalize-order',\n  templateUrl: './finalize-order.component.html',\n  styleUrls: ['./finalize-order.component.css']\n})], FinalizeOrderComponent);\nexport { FinalizeOrderComponent };","map":{"version":3,"mappings":"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","names":["Component","FinalizeOrderComponent","constructor","carrinhoService","fb","currentDate","Date","setHours","getHours","defaultHorario","formatHorario","form","group","tipoEntrega","tipoEntregaValidator","enderecoEntrega","ngOnInit","produtosDoCarrinho","obterProdutosDoCarrinho","toggleEndereco","control","retirar","get","value","entregar","tipoEntregaInvalido","calcularPrecoTotal","total","item","price","quantidade","calcularPrecoTotalFinal","valorEntrega","date","hours","padZeroes","minutes","getMinutes","num","editarHorario","editandoHorario","concluirCompra","length","itensPedido","map","name","toFixed","join","mensagem","metodoPagamento","metodoEntrega","dataHora","linkWhatsApp","numeroLoja","encodeURIComponent","window","open","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\gumal\\OneDrive\\Área de Trabalho\\malimpensa\\src\\app\\order\\finalize-order\\finalize-order.component.ts"],"sourcesContent":["import { Component, OnInit  } from '@angular/core';\nimport { CarrinhoService } from '../../services/carrinho.service';\nimport { FormBuilder, FormGroup } from '@angular/forms';\n\n\n@Component({\n  selector: 'app-finalize-order',\n  templateUrl: './finalize-order.component.html',\n  styleUrls: ['./finalize-order.component.css']\n})\nexport class FinalizeOrderComponent implements OnInit {\n\n  metodoEntregaOpcao: string = 'entregar'; // Declare a variável\n  metodoPagamento: string = 'pix';\n  metodoEntrega: string = 'retirar';\n  enderecoEntrega: string = '';\n  dataHora: string = '';\n  numeroLoja: string = '+5519999372133';\n  produtosDoCarrinho: any[] = []; // Declare a propriedade produtosDoCarrinho aqui\n  tipoEntrega: string = ''; // Variável para armazenar o tipo de entrega\n  defaultHorario: string;\n  editandoHorario: boolean = false;\n  horarioPersonalizado: string = '';\n  totalCompra: number = 0;\n  valorEntrega: number = 0; // Inicialmente, o valor de entrega é 0\n  form: FormGroup;\n\n  constructor(private carrinhoService: CarrinhoService,\n    private fb: FormBuilder\n     ) {\n    // Obtém a hora atual\n    const currentDate = new Date();\n    currentDate.setHours(currentDate.getHours() + 1);\n\n    // Formata a hora no formato 'hh:mm'\n    this.defaultHorario = this.formatHorario(currentDate);\n\n    //Validação entrega\n    this.form = this.fb.group({\n      tipoEntrega: ['', this.tipoEntregaValidator()],\n      enderecoEntrega: [''],\n    });\n  }\n\n  ngOnInit() {\n    // Obtenha os produtos do carrinho usando o serviço\n    this.produtosDoCarrinho = this.carrinhoService.obterProdutosDoCarrinho();\n  }\n\n  toggleEndereco() {\n    if (this.tipoEntrega === 'entregar') {\n      // Se a opção \"Entrega no Endereço\" estiver selecionada, mostre o campo de endereço\n      return true;\n    }\n    // Caso contrário, oculte o campo de endereço\n    return false;\n  }\n\n  tipoEntregaValidator() {\n    return (control: any) => {\n      const retirar = control.get('retirar').value;\n      const entregar = control.get('entregar').value;\n\n      if (!(retirar || entregar)) {\n        return { tipoEntregaInvalido: true };\n      }\n\n      return null;\n    };\n  }\n\n  calcularPrecoTotal(): number {\n    let total = 0;\n    for (const item of this.produtosDoCarrinho) {\n      total += item.price * item.quantidade;\n    }\n    return total;\n  }\n\n  calcularPrecoTotalFinal(): number {\n    let total = 0;\n\n    for (const item of this.produtosDoCarrinho) {\n      total += item.price * item.quantidade;\n    }\n\n    // Se a opção de entrega for \"entregar\", adicione o valor da entrega\n    if (this.tipoEntrega === 'entregar') {\n      total += this.valorEntrega;\n    }\n\n    return total;\n  }\n\n\n  // Função para formatar a hora\n  formatHorario(date: Date): string {\n    const hours = this.padZeroes(date.getHours());\n    const minutes = this.padZeroes(date.getMinutes());\n\n    return `${hours}:${minutes}`;\n  }\n\n  // Função auxiliar para adicionar zeros à esquerda\n  padZeroes(num: number): string {\n    return num < 10 ? `0${num}` : `${num}`;\n  }\n\n  // Função para habilitar a edição do horário personalizado\n  editarHorario() {\n    this.editandoHorario = true;\n  }\n  //Construção do formulario para enviar\n  concluirCompra() {\n    if (this.produtosDoCarrinho.length === 0) { \n      return;\n    }\n  \n    const itensPedido = this.produtosDoCarrinho.map(item => `${item.quantidade}x ${item.name} - R$${(item.price * item.quantidade).toFixed(2)}`).join(' | ');\n  \n    const mensagem =\n\n      `Olá, gostaria de realizar um pedido!\\n\\n` +\n      `${itensPedido}\\n\\n` +\n      `Ficando no Total: R$${this.calcularPrecoTotalFinal().toFixed(2)}.` +\n      ` ------------\\n` +\n      `O método de pagamento vai ser: ${this.metodoPagamento}, Método de entrega: ${this.metodoEntrega === 'retirar' ? 'Vou retirar o pedido' : 'Vou querer que entregue (' + this.enderecoEntrega + ')'}, as ${this.dataHora} horas.  Aguardo seu retorno!`;\n  \n    const linkWhatsApp = `https://wa.me/${this.numeroLoja}?text=${encodeURIComponent(mensagem)}`;\n  \n    window.open(linkWhatsApp, '_blank');\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}