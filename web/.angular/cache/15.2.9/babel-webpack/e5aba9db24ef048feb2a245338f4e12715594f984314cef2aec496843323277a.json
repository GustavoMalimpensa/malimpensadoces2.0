{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nlet ProductsComponent = class ProductsComponent {\n  constructor(modalService, ProductService // Injete o serviço aqui\n  ) {\n    this.modalService = modalService;\n    this.ProductService = ProductService;\n    // Defina suas categorias aqui\n    this.categories = ['bolo', 'cone_trufado', 'bolo_pote'];\n    this.filteredProducts = []; // Array para armazenar produtos filtrados\n    this.allProducts = []; // Array para armazenar todos os produtos\n    // Carrinho de compras\n    this.cart = [];\n    this.successMessage = ''; // Mensagem de sucesso\n    this.errorMessage = ''; // Mensagem de erro\n    this.Product = {\n      imageUrl: '',\n      category: '',\n      name: '',\n      content: '',\n      price: ''\n    };\n  }\n  ngOnInit() {\n    // Carregue todos os produtos ao inicializar o componente\n    this.loadProducts();\n  }\n  filterProducts(category) {\n    // Filtrar produtos com base na categoria selecionada\n    this.filteredProducts = this.allProducts.filter(product => product.category === category);\n  }\n  loadProducts() {\n    // Chame o serviço para carregar todos os produtos\n    this.ProductService.getAllProducts().subscribe(products => {\n      this.allProducts = products; // Forçar a tipagem para um array\n      // Inicialmente, exiba todos os produtos\n      this.filteredProducts = this.allProducts;\n    });\n  }\n  openModal(buttonNumber) {\n    this.title = `Comprar produtos`;\n    this.modalRef = this.modalService.show(this.modalTemplate);\n  }\n};\n__decorate([ViewChild('modalTemplate')], ProductsComponent.prototype, \"modalTemplate\", void 0);\nProductsComponent = __decorate([Component({\n  selector: 'app-products',\n  templateUrl: './products.component.html',\n  styleUrls: ['./products.component.css']\n})], ProductsComponent);\nexport { ProductsComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,EAAEC,SAAS,QAAQ,eAAe;AAS7C,IAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EAoB5BC,YACUC,YAA4B,EAC5BC,cAA8B,CAAC;EAAA;IAD/B,iBAAY,GAAZD,YAAY;IACZ,mBAAc,GAAdC,cAAc;IApBxB;IACA,eAAU,GAAa,CAAC,MAAM,EAAE,cAAc,EAAE,WAAW,CAAC;IAC5D,qBAAgB,GAAU,EAAE,CAAC,CAAC;IAC9B,gBAAW,GAAU,EAAE,CAAC,CAAC;IACzB;IACA,SAAI,GAAU,EAAE;IAGhB,mBAAc,GAAW,EAAE,CAAC,CAAC;IAC7B,iBAAY,GAAW,EAAE,CAAC,CAAG;IAC7B,YAAO,GAAQ;MACbC,QAAQ,EAAE,EAAE;MACZC,QAAQ,EAAE,EAAE;MACZC,IAAI,EAAE,EAAE;MACRC,OAAO,EAAE,EAAE;MACXC,KAAK,EAAE;KACR;EAKE;EAEHC,QAAQ;IACN;IACA,IAAI,CAACC,YAAY,EAAE;EACrB;EAEAC,cAAc,CAACN,QAAgB;IAC7B;IACA,IAAI,CAACO,gBAAgB,GAAG,IAAI,CAACC,WAAW,CAACC,MAAM,CAAEC,OAAO,IAAKA,OAAO,CAACV,QAAQ,KAAKA,QAAQ,CAAC;EAC7F;EAEAK,YAAY;IACV;IACA,IAAI,CAACP,cAAc,CAACa,cAAc,EAAE,CAACC,SAAS,CAAEC,QAAQ,IAAI;MAC1D,IAAI,CAACL,WAAW,GAAGK,QAAiB,CAAC,CAAC;MACtC;MACA,IAAI,CAACN,gBAAgB,GAAG,IAAI,CAACC,WAAW;IAC1C,CAAC,CAAC;EACJ;EAGAM,SAAS,CAACC,YAAoB;IAC5B,IAAI,CAACC,KAAK,GAAG,kBAAkB;IAC/B,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACpB,YAAY,CAACqB,IAAI,CAAC,IAAI,CAACC,aAAa,CAAC;EAC5D;CAuBD;AAD6BC,YAA3B1B,SAAS,CAAC,eAAe,CAAC,wDAAwB;AAtExCC,iBAAiB,eAL7BF,SAAS,CAAC;EACT4B,QAAQ,EAAE,cAAc;EACxBC,WAAW,EAAE,2BAA2B;EACxCC,SAAS,EAAE,CAAC,0BAA0B;CACvC,CAAC,GACW5B,iBAAiB,CAuE7B;SAvEYA,iBAAiB","names":["Component","ViewChild","ProductsComponent","constructor","modalService","ProductService","imageUrl","category","name","content","price","ngOnInit","loadProducts","filterProducts","filteredProducts","allProducts","filter","product","getAllProducts","subscribe","products","openModal","buttonNumber","title","modalRef","show","modalTemplate","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\gumal\\OneDrive\\Área de Trabalho\\malimpens2.0\\web\\src\\app\\user\\products\\products.component.ts"],"sourcesContent":["import { Component, ViewChild } from '@angular/core';\nimport { BsModalService, BsModalRef } from 'ngx-bootstrap/modal';\nimport { ProductService } from 'src/services/ProductService';\n\n@Component({\n  selector: 'app-products',\n  templateUrl: './products.component.html',\n  styleUrls: ['./products.component.css']\n})\nexport class ProductsComponent {\n\n  // Defina suas categorias aqui\n  categories: string[] = ['bolo', 'cone_trufado', 'bolo_pote'];\n  filteredProducts: any[] = []; // Array para armazenar produtos filtrados\n  allProducts: any[] = []; // Array para armazenar todos os produtos\n  // Carrinho de compras\n  cart: any[] = [];\n  modalRef?: BsModalRef;\n  title: any;\n  successMessage: string = ''; // Mensagem de sucesso\n  errorMessage: string = '';   // Mensagem de erro\n  Product: any = {\n    imageUrl: '',\n    category: '',\n    name: '',\n    content: '',\n    price: '',\n  };\n\n  constructor(\n    private modalService: BsModalService,\n    private ProductService: ProductService // Injete o serviço aqui\n  ) {}\n\n  ngOnInit(): void {\n    // Carregue todos os produtos ao inicializar o componente\n    this.loadProducts();\n  }\n\n  filterProducts(category: string) {\n    // Filtrar produtos com base na categoria selecionada\n    this.filteredProducts = this.allProducts.filter((product) => product.category === category);\n  }\n\n  loadProducts() {\n    // Chame o serviço para carregar todos os produtos\n    this.ProductService.getAllProducts().subscribe((products) => {\n      this.allProducts = products as any[]; // Forçar a tipagem para um array\n      // Inicialmente, exiba todos os produtos\n      this.filteredProducts = this.allProducts;\n    });\n  }\n  \n\n  openModal(buttonNumber: number) {\n    this.title = `Comprar produtos`;\n    this.modalRef = this.modalService.show(this.modalTemplate);\n  }\n\n // comprar() {\n   // this.ProductService.comprar(this.Product).subscribe(\n     // (response) => {\n       // console.log('Product comprado com sucesso:', response);\n        //this.successMessage = 'Product comprado com sucesso.';\n        //this.errorMessage = ''; // Limpa qualquer mensagem de erro anterior\n        // Lógica adicional após o Product bem-sucedido, se necessário\n        // Lógica adicional após o Product bem-sucedido, se necessário\n    //  },\n     // (error) => {\n      //  console.error('Erro ao comprar o Product:', error);\n       // this.errorMessage = 'Erro ao comprar o produto. Tente novamente.';\n        //this.successMessage = ''; // Limpa qualquer mensagem de sucesso anterior\n        // Lógica de tratamento de erro, se necessário\n    //  }\n   // );\n//  }\n\n  \n  \n  @ViewChild('modalTemplate') modalTemplate!: string;\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}