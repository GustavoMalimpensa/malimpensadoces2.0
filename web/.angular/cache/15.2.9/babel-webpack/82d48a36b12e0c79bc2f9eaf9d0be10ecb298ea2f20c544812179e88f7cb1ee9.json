{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nlet ProductsComponent = class ProductsComponent {\n  constructor(modalService, router, carrinhoService, ProductService // Injete o serviço aqui\n  ) {\n    this.modalService = modalService;\n    this.router = router;\n    this.carrinhoService = carrinhoService;\n    this.ProductService = ProductService;\n    // Defina suas categorias aqui\n    this.categories = ['bolo', 'cone_trufado', 'bolo_pote'];\n    this.filteredProducts = []; // Array para armazenar produtos filtrados\n    this.allProducts = []; // Array para armazenar todos os produtos\n    this.selectedCategory = '*'; // Inicialmente, define como '*' (todos)\n    this.precoTotal = 0;\n    this.numeroLoja = '+5519999372133';\n    // Carrinho de compras\n    this.carrinho = [];\n    this.cart = [];\n    this.successMessage = ''; // Mensagem de sucesso\n    this.errorMessage = ''; // Mensagem de erro\n    this.Product = {\n      imageUrl: '',\n      category: '',\n      name: '',\n      content: '',\n      price: ''\n    };\n    this.numeroLoja = '+5519999372133'; // Substitua '+1234567890' pelo número de telefone da sua loja\n    this.carrinho = []; // Inicialize a variável carrinho aqui\n  }\n\n  ngOnInit() {\n    // Carregue todos os produtos ao inicializar o componente\n    this.loadProducts();\n  }\n  filterProducts(category) {\n    // Filtrar produtos com base na categoria selecionada\n    this.filteredProducts = this.allProducts.filter(product => product.category === category);\n    this.selectedCategory = category;\n    if (category === '*') {\n      // Se a categoria for '*' (Todos), não aplique nenhum filtro\n      this.filteredProducts = this.allProducts;\n    } else {\n      // Caso contrário, filtre os produtos com base na categoria selecionada\n      this.filteredProducts = this.allProducts.filter(product => product.category === category);\n    }\n  }\n  loadProducts() {\n    // Chame o serviço para carregar todos os produtos\n    this.ProductService.getAllProducts().subscribe(products => {\n      this.allProducts = products; // Forçar a tipagem para um array\n      // Inicialmente, exiba todos os produtos\n      this.filteredProducts = this.allProducts;\n    });\n  }\n  openModal(buttonNumber) {\n    this.title = `Comprar produtos`;\n    this.modalRef = this.modalService.show(this.modalTemplate);\n  }\n  // comprar() {\n  // this.ProductService.comprar(this.Product).subscribe(\n  // (response) => {\n  // console.log('Product comprado com sucesso:', response);\n  //this.successMessage = 'Product comprado com sucesso.';\n  //this.errorMessage = ''; // Limpa qualquer mensagem de erro anterior\n  // Lógica adicional após o Product bem-sucedido, se necessário\n  // Lógica adicional após o Product bem-sucedido, se necessário\n  //  },\n  // (error) => {\n  //  console.error('Erro ao comprar o Product:', error);\n  // this.errorMessage = 'Erro ao comprar o produto. Tente novamente.';\n  //this.successMessage = ''; // Limpa qualquer mensagem de sucesso anterior\n  // Lógica de tratamento de erro, se necessário\n  //  }\n  // );\n  //  }\n  //responsavel pelo carrinho\n  adicionarAoCarrinho(product) {\n    const itemNoCarrinho = this.getCarrinhoItem(product);\n    if (itemNoCarrinho) {\n      // Se o produto já estiver no carrinho, apenas atualize a quantidade\n      itemNoCarrinho.quantidade++;\n    } else {\n      // Se o produto não estiver no carrinho, crie um novo item no carrinho\n      const newItem = {\n        ...product,\n        quantidade: 1\n      };\n      this.carrinho.push(newItem);\n    }\n    // Atualizar o preço total do carrinho\n    this.precoTotal = this.calcularPrecoTotal();\n  }\n  removerDoCarrinho(item) {\n    if (item.quantidade === 1) {\n      // Se a quantidade for 1, removemos completamente o item do carrinho\n      const index = this.carrinho.findIndex(i => i.id === item.id);\n      if (index !== -1) {\n        this.carrinho.splice(index, 1);\n      }\n    } else {\n      // Se a quantidade for maior que 1, diminuímos a quantidade\n      item.quantidade--;\n    }\n    // Atualizar o preço total do carrinho\n    this.precoTotal = this.calcularPrecoTotal();\n  }\n  calcularPrecoTotal() {\n    let total = 0;\n    for (const item of this.carrinho) {\n      total += item.price * item.quantidade;\n    }\n    return total;\n  }\n  getCarrinhoItem(product) {\n    return this.carrinho.find(item => item.id === product.id);\n  }\n  estaNoCarrinho(product) {\n    return this.carrinho.some(item => item.id === product.id);\n  }\n  concluirCompra() {\n    if (this.carrinho.length === 0) {\n      return; // Não faça nada se o carrinho estiver vazio\n    }\n    // Formate os itens do carrinho em uma mensagem\n    let mensagem = 'Pedido:';\n    for (const item of this.carrinho) {\n      mensagem += `%0A${item.quantidade}x ${item.name} - R$${(item.price * item.quantidade).toFixed(2)}`;\n    }\n    // Crie o link do WhatsApp com a mensagem e o número de telefone da loja\n    const linkWhatsApp = `https://wa.me/${this.numeroLoja}?text=${mensagem}`;\n    // Abra uma nova aba ou janela do navegador com o link do WhatsApp\n    window.open(linkWhatsApp, '_blank');\n  }\n};\n__decorate([ViewChild('modalTemplate')], ProductsComponent.prototype, \"modalTemplate\", void 0);\nProductsComponent = __decorate([Component({\n  selector: 'app-products',\n  templateUrl: './products.component.html',\n  styleUrls: ['./products.component.css']\n})], ProductsComponent);\nexport { ProductsComponent };","map":{"version":3,"mappings":"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","names":["Component","ViewChild","ProductsComponent","constructor","modalService","router","carrinhoService","ProductService","imageUrl","category","name","content","price","numeroLoja","carrinho","ngOnInit","loadProducts","filterProducts","filteredProducts","allProducts","filter","product","selectedCategory","getAllProducts","subscribe","products","openModal","buttonNumber","title","modalRef","show","modalTemplate","adicionarAoCarrinho","itemNoCarrinho","getCarrinhoItem","quantidade","newItem","push","precoTotal","calcularPrecoTotal","removerDoCarrinho","item","index","findIndex","i","id","splice","total","find","estaNoCarrinho","some","concluirCompra","length","mensagem","toFixed","linkWhatsApp","window","open","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\gumal\\OneDrive\\Área de Trabalho\\malimpens2.0\\web\\src\\app\\user\\products\\products.component.ts"],"sourcesContent":["import { Component, ViewChild } from '@angular/core';\nimport { BsModalService, BsModalRef } from 'ngx-bootstrap/modal';\nimport { ProductService } from 'src/app/services/product.service';\nimport { CarrinhoService } from '../../services/carrinho.service';\n\n@Component({\n  selector: 'app-products',\n  templateUrl: './products.component.html',\n  styleUrls: ['./products.component.css']\n})\nexport class ProductsComponent {\n\n  // Defina suas categorias aqui\n  categories: string[] = ['bolo', 'cone_trufado', 'bolo_pote'];\n  filteredProducts: any[] = []; // Array para armazenar produtos filtrados\n  allProducts: any[] = []; // Array para armazenar todos os produtos\n  selectedCategory: string = '*'; // Inicialmente, define como '*' (todos)\n  precoTotal: number = 0;\n  numeroLoja: string = '+5519999372133';\n  // Carrinho de compras\n  carrinho: any[] = [];\n  cart: any[] = [];\n  modalRef?: BsModalRef;\n  title: any;\n  successMessage: string = ''; // Mensagem de sucesso\n  errorMessage: string = '';   // Mensagem de erro\n  Product: any = {\n    imageUrl: '',\n    category: '',\n    name: '',\n    content: '',\n    price: '',\n  };\n\n\n  constructor(\n    private modalService: BsModalService,\n    private router: Router, private carrinhoService: CarrinhoService,\n    private ProductService: ProductService // Injete o serviço aqui\n  ) {\n    this.numeroLoja = '+5519999372133'; // Substitua '+1234567890' pelo número de telefone da sua loja\n    this.carrinho = []; // Inicialize a variável carrinho aqui\n  }\n\n  \n  \n\n\n  ngOnInit(): void {\n    // Carregue todos os produtos ao inicializar o componente\n    this.loadProducts();\n  }\n\n  filterProducts(category: string) {\n    // Filtrar produtos com base na categoria selecionada\n    this.filteredProducts = this.allProducts.filter((product) => product.category === category);\n    this.selectedCategory = category;\n    if (category === '*') {\n      // Se a categoria for '*' (Todos), não aplique nenhum filtro\n      this.filteredProducts = this.allProducts;\n    } else {\n      // Caso contrário, filtre os produtos com base na categoria selecionada\n      this.filteredProducts = this.allProducts.filter(product => product.category === category);\n    }\n  }\n\n  loadProducts() {\n    // Chame o serviço para carregar todos os produtos\n    this.ProductService.getAllProducts().subscribe((products) => {\n      this.allProducts = products as any[]; // Forçar a tipagem para um array\n      // Inicialmente, exiba todos os produtos\n      this.filteredProducts = this.allProducts;\n    });\n  }\n  \n\n  openModal(buttonNumber: number) {\n    this.title = `Comprar produtos`;\n    this.modalRef = this.modalService.show(this.modalTemplate);\n  }\n\n // comprar() {\n   // this.ProductService.comprar(this.Product).subscribe(\n     // (response) => {\n       // console.log('Product comprado com sucesso:', response);\n        //this.successMessage = 'Product comprado com sucesso.';\n        //this.errorMessage = ''; // Limpa qualquer mensagem de erro anterior\n        // Lógica adicional após o Product bem-sucedido, se necessário\n        // Lógica adicional após o Product bem-sucedido, se necessário\n    //  },\n     // (error) => {\n      //  console.error('Erro ao comprar o Product:', error);\n       // this.errorMessage = 'Erro ao comprar o produto. Tente novamente.';\n        //this.successMessage = ''; // Limpa qualquer mensagem de sucesso anterior\n        // Lógica de tratamento de erro, se necessário\n    //  }\n   // );\n//  }\n\n\n  //responsavel pelo carrinho\n\n  adicionarAoCarrinho(product: any) {\n    const itemNoCarrinho = this.getCarrinhoItem(product);\n  \n    if (itemNoCarrinho) {\n      // Se o produto já estiver no carrinho, apenas atualize a quantidade\n      itemNoCarrinho.quantidade++;\n    } else {\n      // Se o produto não estiver no carrinho, crie um novo item no carrinho\n      const newItem = { ...product, quantidade: 1 };\n      this.carrinho.push(newItem);\n    }\n  \n    // Atualizar o preço total do carrinho\n    this.precoTotal = this.calcularPrecoTotal();\n  }\n  \n  removerDoCarrinho(item: any) {\n    if (item.quantidade === 1) {\n      // Se a quantidade for 1, removemos completamente o item do carrinho\n      const index = this.carrinho.findIndex((i) => i.id === item.id);\n      if (index !== -1) {\n        this.carrinho.splice(index, 1);\n      }\n    } else {\n      // Se a quantidade for maior que 1, diminuímos a quantidade\n      item.quantidade--;\n    }\n  \n    // Atualizar o preço total do carrinho\n    this.precoTotal = this.calcularPrecoTotal();\n  }\n  \n\n  calcularPrecoTotal(): number {\n    let total = 0;\n    for (const item of this.carrinho) {\n      total += item.price * item.quantidade;\n    }\n    return total;\n  }\n\n  getCarrinhoItem(product: any) {\n    return this.carrinho.find((item) => item.id === product.id);\n  }\n\n  estaNoCarrinho(product: any): boolean {\n    return this.carrinho.some((item) => item.id === product.id);\n  }\n\n  concluirCompra() {\n    if (this.carrinho.length === 0) {\n      return; // Não faça nada se o carrinho estiver vazio\n    }\n  \n    // Formate os itens do carrinho em uma mensagem\n    let mensagem = 'Pedido:';\n    for (const item of this.carrinho) {\n      mensagem += `%0A${item.quantidade}x ${item.name} - R$${(item.price * item.quantidade).toFixed(2)}`;\n    }\n  \n    // Crie o link do WhatsApp com a mensagem e o número de telefone da loja\n    const linkWhatsApp = `https://wa.me/${this.numeroLoja}?text=${mensagem}`;\n  \n    // Abra uma nova aba ou janela do navegador com o link do WhatsApp\n    window.open(linkWhatsApp, '_blank');\n  }\n  \n  \n  @ViewChild('modalTemplate') modalTemplate!: string;\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}