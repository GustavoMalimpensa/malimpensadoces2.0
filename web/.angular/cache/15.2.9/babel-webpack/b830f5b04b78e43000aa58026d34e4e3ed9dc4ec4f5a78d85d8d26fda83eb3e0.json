{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { ptBrLocale } from 'ngx-bootstrap/locale';\nimport { defineLocale } from 'ngx-bootstrap/chronos';\nlet CalendarComponent = class CalendarComponent {\n  constructor(modalService, agendamentoService // Injete o serviço real aqui\n  ) {\n    this.modalService = modalService;\n    this.agendamentoService = agendamentoService;\n    this.semanaAtual = 0;\n    this.agendamentosDaSemana = [];\n    this.agendamento = {\n      content: '',\n      date: '',\n      time: '',\n      service: '',\n      user_id: '1' // Certifique-se de definir o user_id conforme necessário\n    };\n\n    this.user = {\n      name: '',\n      number: ''\n    };\n    this.agendamentos = [{\n      horario: '09:00',\n      imagem: '../assets/img/pessoa.jpg',\n      nome: 'João',\n      servico: 'Cortar o cabelo',\n      observacao: 'Com tesoura'\n    }, {\n      horario: '10:00',\n      imagem: '../assets/img/pessoa.jpg',\n      nome: 'Maria',\n      servico: 'Fazer a sombrancelha',\n      observacao: 'Com pinça'\n    }, {\n      horario: '11:00',\n      imagem: '../assets/img/pessoa.jpg',\n      nome: 'Pedro',\n      servico: 'Fazer a barba',\n      observacao: 'Com navalha'\n    }, {\n      horario: '14:00',\n      imagem: '../assets/img/pessoa.jpg',\n      nome: 'Ana',\n      servico: 'Cortar o cabelo',\n      observacao: 'Com tesoura'\n    }, {\n      horario: '15:00',\n      imagem: '../assets/img/pessoa.jpg',\n      nome: 'Lucas',\n      servico: 'Fazer a sombrancelha',\n      observacao: 'Com pinça'\n    }];\n    this.presentDays = 0;\n    this.abstractDays = 0;\n    this.events = [{\n      title: 'nome',\n      date: '2023-07-07',\n      colr: '#0000FF'\n    }\n    // Adicione outros eventos conforme necessário\n    ];\n\n    this.config = {\n      animated: true\n    };\n    defineLocale('pt-br', ptBrLocale);\n  }\n  entrarEmContato(agendamento) {\n    // Verifique se o agendamento possui um número de telefone\n    if (agendamento.telefone) {\n      // Crie uma URL para o WhatsApp com o número de telefone e a mensagem\n      const mensagem = 'Olá, Tudo bem? ' + agendamento.nome + 'Quero falar referente ao seu agendamento.';\n      const urlWhatsApp = `https://wa.me/${agendamento.telefone}?text=${encodeURIComponent(mensagem)}`;\n      // Abra a URL no navegador para iniciar uma conversa no WhatsApp\n      window.open(urlWhatsApp, '_blank');\n    } else {\n      console.log('Número de telefone não encontrado.');\n    }\n  }\n  carregarAgendamentosDaSemana() {}\n  mudarSemana(delta) {\n    // Atualize a semana atual adicionando ou subtraindo o delta\n    this.semanaAtual += delta;\n    // Chame uma função para carregar os agendamentos da nova semana\n    this.carregarAgendamentosDaSemana();\n  }\n  atualizarAgendamentosDaSemana() {\n    // Defina a data de início da semana com base na semana atual\n    const inicioDaSemana = new Date();\n    inicioDaSemana.setDate(inicioDaSemana.getDate() + this.semanaAtual * 7);\n    // Defina a data de final da semana (7 dias depois do início)\n    const finalDaSemana = new Date(inicioDaSemana);\n    finalDaSemana.setDate(finalDaSemana.getDate() + 7);\n    // Use o serviço para buscar os agendamentos do usuário atual\n    this.agendamentoService.getAgendamentosDoUsuario().subscribe(agendamentos => {\n      // Filtrar os agendamentos para exibir apenas aqueles que ocorrem na semana atual\n      this.agendamentosDaSemana = agendamentos.filter(agendamento => {\n        // Converta a string de data e hora em uma data completa\n        const dataHoraAgendamento = new Date(`${agendamento.date}T${agendamento.time}`);\n        // Verifique se o agendamento está dentro da semana atual\n        return dataHoraAgendamento >= inicioDaSemana && dataHoraAgendamento < finalDaSemana;\n      });\n    });\n  }\n  ngOnInit() {\n    // Chame a função para atualizar os agendamentos da semana inicialmente\n    this.atualizarAgendamentosDaSemana();\n  }\n  handleDateClick(arg) {\n    console.log(arg);\n    console.log(arg.event._def.title);\n    this.title = arg.event._def.title;\n    this.modalRef = this.modalService.show(this.template, this.config);\n  }\n};\n__decorate([ViewChild('template')], CalendarComponent.prototype, \"template\", void 0);\nCalendarComponent = __decorate([Component({\n  selector: 'app-calendar',\n  templateUrl: './calendar.component.html',\n  styleUrls: ['./calendar.component.css']\n})], CalendarComponent);\nexport { CalendarComponent };","map":{"version":3,"mappings":"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","names":["Component","ViewChild","ptBrLocale","defineLocale","CalendarComponent","constructor","modalService","agendamentoService","content","date","time","service","user_id","name","number","horario","imagem","nome","servico","observacao","title","colr","animated","entrarEmContato","agendamento","telefone","mensagem","urlWhatsApp","encodeURIComponent","window","open","console","log","carregarAgendamentosDaSemana","mudarSemana","delta","semanaAtual","atualizarAgendamentosDaSemana","inicioDaSemana","Date","setDate","getDate","finalDaSemana","getAgendamentosDoUsuario","subscribe","agendamentos","agendamentosDaSemana","filter","dataHoraAgendamento","ngOnInit","handleDateClick","arg","event","_def","modalRef","show","template","config","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\gumal\\OneDrive\\Área de Trabalho\\malimpens2.0\\web\\src\\app\\admin\\calendar\\calendar.component.ts"],"sourcesContent":["import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { BsModalService, BsModalRef } from 'ngx-bootstrap/modal';\r\nimport { ptBrLocale } from 'ngx-bootstrap/locale';\r\nimport { defineLocale } from 'ngx-bootstrap/chronos';\r\n\r\n@Component({\r\n  selector: 'app-calendar',\r\n  templateUrl: './calendar.component.html',\r\n  styleUrls: ['./calendar.component.css']\r\n})\r\nexport class CalendarComponent implements OnInit {\r\n\r\n  semanaAtual: number = 0;\r\n  agendamentosDaSemana: any[] = [];\r\n\r\n  agendamento: any = {\r\n    content: '',\r\n    date: '',\r\n    time: '',\r\n    service: '',\r\n    user_id: '1', // Certifique-se de definir o user_id conforme necessário\r\n  };\r\n\r\n  user: any = {\r\n    name: '',\r\n    number: '',\r\n  }\r\n\r\n  agendamentos = [\r\n    {\r\n      horario: '09:00',\r\n      imagem: '../assets/img/pessoa.jpg',\r\n      nome: 'João',\r\n      servico: 'Cortar o cabelo',\r\n      observacao: 'Com tesoura'\r\n    },\r\n    {\r\n      horario: '10:00',\r\n      imagem: '../assets/img/pessoa.jpg',\r\n      nome: 'Maria',\r\n      servico: 'Fazer a sombrancelha',\r\n      observacao: 'Com pinça'\r\n    },\r\n    {\r\n      horario: '11:00',\r\n      imagem: '../assets/img/pessoa.jpg', \r\n      nome: 'Pedro',\r\n      servico: 'Fazer a barba',\r\n      observacao: 'Com navalha'\r\n    },\r\n    {\r\n      horario: '14:00',\r\n      imagem: '../assets/img/pessoa.jpg',\r\n      nome: 'Ana',\r\n      servico: 'Cortar o cabelo',\r\n      observacao: 'Com tesoura'\r\n    },\r\n    {\r\n      horario: '15:00',\r\n      imagem: '../assets/img/pessoa.jpg',\r\n      nome: 'Lucas',\r\n      servico: 'Fazer a sombrancelha',\r\n      observacao: 'Com pinça'\r\n    }\r\n  ];\r\n\r\n  modalRef?: BsModalRef;\r\n  title: any;\r\n  presentDays: number = 0;\r\n  abstractDays: number = 0;\r\n  events: any = [\r\n    { title: 'nome', date: '2023-07-07', colr: '#0000FF' },\r\n    // Adicione outros eventos conforme necessário\r\n  ];\r\n\r\n  entrarEmContato(agendamento: any) {\r\n    // Verifique se o agendamento possui um número de telefone\r\n    if (agendamento.telefone) {\r\n      // Crie uma URL para o WhatsApp com o número de telefone e a mensagem\r\n      const mensagem = 'Olá, Tudo bem? ' + agendamento.nome + 'Quero falar referente ao seu agendamento.';\r\n      const urlWhatsApp = `https://wa.me/${agendamento.telefone}?text=${encodeURIComponent(mensagem)}`;\r\n\r\n      // Abra a URL no navegador para iniciar uma conversa no WhatsApp\r\n      window.open(urlWhatsApp, '_blank');\r\n    } else {\r\n      console.log('Número de telefone não encontrado.');\r\n    }\r\n  }\r\n\r\n  carregarAgendamentosDaSemana() {}\r\n\r\n  mudarSemana(delta: number) {\r\n    // Atualize a semana atual adicionando ou subtraindo o delta\r\n    this.semanaAtual += delta;\r\n\r\n    // Chame uma função para carregar os agendamentos da nova semana\r\n    this.carregarAgendamentosDaSemana();\r\n  }\r\n\r\n  config = {\r\n    animated: true\r\n  };\r\n\r\n  @ViewChild('template') template!: string;\r\n\r\n  constructor(\r\n    private modalService: BsModalService,\r\n    private agendamentoService: AgendamentoService // Injete o serviço real aqui\r\n  ) {\r\n    defineLocale('pt-br', ptBrLocale);\r\n  }\r\n\r\n  atualizarAgendamentosDaSemana() {\r\n    // Defina a data de início da semana com base na semana atual\r\n    const inicioDaSemana = new Date();\r\n    inicioDaSemana.setDate(inicioDaSemana.getDate() + (this.semanaAtual * 7));\r\n\r\n    // Defina a data de final da semana (7 dias depois do início)\r\n    const finalDaSemana = new Date(inicioDaSemana);\r\n    finalDaSemana.setDate(finalDaSemana.getDate() + 7);\r\n\r\n    // Use o serviço para buscar os agendamentos do usuário atual\r\n    this.agendamentoService.getAgendamentosDoUsuario().subscribe(agendamentos => {\r\n      // Filtrar os agendamentos para exibir apenas aqueles que ocorrem na semana atual\r\n      this.agendamentosDaSemana = agendamentos.filter(agendamento => {\r\n        // Converta a string de data e hora em uma data completa\r\n        const dataHoraAgendamento = new Date(`${agendamento.date}T${agendamento.time}`);\r\n        \r\n        // Verifique se o agendamento está dentro da semana atual\r\n        return dataHoraAgendamento >= inicioDaSemana && dataHoraAgendamento < finalDaSemana;\r\n      });\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    // Chame a função para atualizar os agendamentos da semana inicialmente\r\n    this.atualizarAgendamentosDaSemana();\r\n  }\r\n\r\n  handleDateClick(arg: any) {\r\n    console.log(arg);\r\n    console.log(arg.event._def.title);\r\n    this.title = arg.event._def.title;\r\n    this.modalRef = this.modalService.show(this.template, this.config);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}