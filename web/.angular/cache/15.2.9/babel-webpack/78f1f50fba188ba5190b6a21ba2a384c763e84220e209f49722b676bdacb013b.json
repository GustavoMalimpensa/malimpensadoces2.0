{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nlet ProductsComponent = class ProductsComponent {\n  constructor(modalService, modalExcluir, ProductService // Injete o serviço aqui\n  ) {\n    this.modalService = modalService;\n    this.modalExcluir = modalExcluir;\n    this.ProductService = ProductService;\n    this.filteredProducts = []; // Array para armazenar produtos filtrados\n    this.selectedCategory = '*'; // Inicialmente, define como '*' (todos)\n    this.successMessage = '';\n    this.errorMessage = '';\n    this.showDeleteConfirmationModal = false;\n    this.allProducts = []; // Array para armazenar todos os produtos\n    this.products = [];\n    this.title = '';\n    this.newProduct = {\n      imageUrl: '',\n      category: '',\n      name: '',\n      content: '',\n      price: '',\n      user_id: '1'\n    };\n  }\n  ngOnInit() {\n    this.loadProducts();\n  }\n  filterProducts(category) {\n    // Filtrar produtos com base na categoria selecionada\n    this.filteredProducts = this.allProducts.filter(product => product.category === category);\n    this.selectedCategory = category;\n    if (category === '*') {\n      // Se a categoria for '*' (Todos), não aplique nenhum filtro\n      this.filteredProducts = this.allProducts;\n    } else {\n      // Caso contrário, filtre os produtos com base na categoria selecionada\n      this.filteredProducts = this.allProducts.filter(product => product.category === category);\n    }\n  }\n  loadProducts() {\n    // Chame o serviço para carregar todos os produtos\n    this.ProductService.getAllProducts().subscribe(products => {\n      // Inicialmente, exiba todos os produtos\n      this.allProducts;\n    });\n  }\n  addProduct() {\n    this.ProductService.addProducts(this.newProduct).subscribe(response => {\n      console.log('Produto adicionado com sucesso:', response);\n      if (response.success) {\n        this.successMessage = 'Produto cadastrado com sucesso!';\n        this.errorMessage = ''; // Limpar a mensagem de erro, se houver\n      } else {\n        this.successMessage = ''; // Limpar a mensagem de sucesso, se houver\n        this.errorMessage = 'Falha ao cadastrar o produto.';\n      }\n      this.newProduct.name = ''; // Limpar o campo de entrada\n      this.loadProducts(); // Recarregar a lista de produtos\n    }, error => {\n      console.error('Erro ao adicionar produto:', error);\n      this.successMessage = ''; // Limpar a mensagem de sucesso, se houver\n      this.errorMessage = 'Falha ao adicionar o produto.';\n    });\n  }\n  handleImageUpload(event) {\n    const file = event.target.files[0]; // Pega o arquivo de imagem\n    const reader = new FileReader();\n    reader.onload = e => {\n      this.newProduct.imageUrl = e.target.result; // Armazena a imagem como base64\n    };\n\n    reader.readAsDataURL(file); // Lê o arquivo como base64\n  }\n\n  deleteProduct(productId) {\n    this.productToDeleteId = productId;\n    this.showDeleteConfirmationModal = true;\n  }\n  confirmDelete() {\n    if (this.productToDeleteId) {\n      this.ProductService.deleteProduct(this.productToDeleteId).subscribe(() => {\n        console.log('Produto excluído com sucesso.');\n        this.loadProducts(); // Recarregar a lista de produtos após a exclusão\n        this.showDeleteConfirmationModal = false; // Fechar o modal após a exclusão\n      }, error => {\n        console.error('Erro ao excluir produto:', error);\n        this.showDeleteConfirmationModal = false; // Fechar o modal em caso de erro\n      });\n    }\n  }\n\n  cancelDelete() {\n    this.productToDeleteId = undefined; // Limpar o ID do produto a ser excluído\n    this.showDeleteConfirmationModal = false; // Fechar o modal\n  }\n\n  openModal(buttonNumber) {\n    this.title = `Comprar produtos`;\n    this.modalRef = this.modalService.show(this.modalTemplate);\n  }\n};\n__decorate([ViewChild('modalTemplate')], ProductsComponent.prototype, \"modalTemplate\", void 0);\nProductsComponent = __decorate([Component({\n  selector: 'app-products',\n  templateUrl: './products.component.html',\n  styleUrls: ['./products.component.css']\n})], ProductsComponent);\nexport { ProductsComponent };","map":{"version":3,"mappings":"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","names":["Component","ViewChild","ProductsComponent","constructor","modalService","modalExcluir","ProductService","imageUrl","category","name","content","price","user_id","ngOnInit","loadProducts","filterProducts","filteredProducts","allProducts","filter","product","selectedCategory","getAllProducts","subscribe","products","addProduct","addProducts","newProduct","response","console","log","success","successMessage","errorMessage","error","handleImageUpload","event","file","target","files","reader","FileReader","onload","e","result","readAsDataURL","deleteProduct","productId","productToDeleteId","showDeleteConfirmationModal","confirmDelete","cancelDelete","undefined","openModal","buttonNumber","title","modalRef","show","modalTemplate","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\gumal\\OneDrive\\Área de Trabalho\\malimpens2.0\\web\\src\\app\\admin\\products\\products.component.ts"],"sourcesContent":["import { Component, ViewChild } from '@angular/core';\nimport { BsModalService, BsModalRef } from 'ngx-bootstrap/modal';\nimport { ProductService } from 'src/app/services/product.service';\nimport { ApiResponse } from 'src/app/shared/models/api-response';\n\n@Component({\n  selector: 'app-products',\n  templateUrl: './products.component.html',\n  styleUrls: ['./products.component.css']\n})\nexport class ProductsComponent {\n  filteredProducts: any[] = []; // Array para armazenar produtos filtrados\n  selectedCategory: string = '*'; // Inicialmente, define como '*' (todos)\n  successMessage: string = '';\n  errorMessage: string = '';\n  productToDeleteId: number | undefined;\n  showDeleteConfirmationModal = false;\n\n\n  allProducts: any[] = []; // Array para armazenar todos os produtos\n  products: any[] = [];\n  title: string = '';\n  newProduct: any = {\n    imageUrl: '',\n    category: '',\n    name: '',\n    content: '',\n    price: '',\n    user_id: '1',\n  };\n  modalRef?: BsModalRef;\n  \n  constructor(\n    private modalService: BsModalService,\n    private modalExcluir: BsModalExcluir,\n    private ProductService: ProductService // Injete o serviço aqui\n  ) {}\n\n  ngOnInit(): void {\n    this.loadProducts();\n  }\n\n  filterProducts(category: string) {\n    // Filtrar produtos com base na categoria selecionada\n    this.filteredProducts = this.allProducts.filter((product) => product.category === category);\n    this.selectedCategory = category;\n    if (category === '*') {\n      // Se a categoria for '*' (Todos), não aplique nenhum filtro\n      this.filteredProducts = this.allProducts;\n    } else {\n      // Caso contrário, filtre os produtos com base na categoria selecionada\n      this.filteredProducts = this.allProducts.filter(product => product.category === category);\n    }\n  } \n \n  loadProducts() {\n    // Chame o serviço para carregar todos os produtos\n    this.ProductService.getAllProducts().subscribe((products) => {\n      // Inicialmente, exiba todos os produtos\n      this.allProducts;\n    });\n  }\n  \n  addProduct() {\n    this.ProductService.addProducts(this.newProduct).subscribe(\n      (response: ApiResponse) => {\n        console.log('Produto adicionado com sucesso:', response);\n  \n        if (response.success) {\n          this.successMessage = 'Produto cadastrado com sucesso!';\n          this.errorMessage = ''; // Limpar a mensagem de erro, se houver\n        } else {\n          this.successMessage = ''; // Limpar a mensagem de sucesso, se houver\n          this.errorMessage = 'Falha ao cadastrar o produto.';\n        }\n  \n        this.newProduct.name = ''; // Limpar o campo de entrada\n        this.loadProducts(); // Recarregar a lista de produtos\n      },\n      (error) => {\n        console.error('Erro ao adicionar produto:', error);\n        this.successMessage = ''; // Limpar a mensagem de sucesso, se houver\n        this.errorMessage = 'Falha ao adicionar o produto.';\n      }\n    );\n  }\n\n  handleImageUpload(event: any) {\n    const file = event.target.files[0]; // Pega o arquivo de imagem\n    const reader = new FileReader();\n  \n    reader.onload = (e: any) => {\n      this.newProduct.imageUrl = e.target.result; // Armazena a imagem como base64\n    };\n  \n    reader.readAsDataURL(file); // Lê o arquivo como base64\n  }\n\n  deleteProduct(productId: number) {\n    this.productToDeleteId = productId;\n    this.showDeleteConfirmationModal = true;\n  }\n\n  confirmDelete() {\n    if (this.productToDeleteId) {\n      this.ProductService.deleteProduct(this.productToDeleteId).subscribe(\n        () => {\n          console.log('Produto excluído com sucesso.');\n          this.loadProducts(); // Recarregar a lista de produtos após a exclusão\n          this.showDeleteConfirmationModal = false; // Fechar o modal após a exclusão\n        },\n        (error) => {\n          console.error('Erro ao excluir produto:', error);\n          this.showDeleteConfirmationModal = false; // Fechar o modal em caso de erro\n        }\n      );\n    }\n  }\n  \n  cancelDelete() {\n    this.productToDeleteId = undefined; // Limpar o ID do produto a ser excluído\n    this.showDeleteConfirmationModal = false; // Fechar o modal\n  }\n  \n\n  openModal(buttonNumber: number) {\n    this.title = `Comprar produtos`;\n    this.modalRef = this.modalService.show(this.modalTemplate);\n  }\n  \n\n  @ViewChild('modalTemplate') modalTemplate!: string;\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}