{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class CarrinhoService {\n  constructor() {\n    this.carrinho = [];\n  }\n  adicionarProdutoAoCarrinho(produto) {\n    // Lógica para adicionar um produto ao carrinho\n    this.carrinho.push(produto);\n  }\n  obterProdutosDoCarrinho() {\n    // Retorna a lista de produtos no carrinho\n    return this.carrinho;\n  }\n  adicionarAoCarrinho(produto) {\n    const itemNoCarrinho = this.getCarrinhoItem(produto);\n    if (itemNoCarrinho) {\n      // Se o produto já estiver no carrinho, atualize a quantidade com base na quantidade selecionada\n      itemNoCarrinho.quantidade += this.quantidadeSelecionada;\n    } else {\n      // Se o produto não estiver no carrinho, crie um novo item no carrinho com a quantidade selecionada\n      const newItem = {\n        ...produto,\n        quantidade: this.quantidadeSelecionada\n      };\n      this.carrinho.push(newItem);\n    }\n    // Limpe a quantidade selecionada\n    this.quantidadeSelecionada = 1;\n    // Feche o modal após adicionar ao carrinho\n    this.modalRef?.hide();\n    // Atualize o preço total do carrinho\n    this.itenTotal = this.calcularItenTotal();\n    this.precoTotal = this.calcularPrecoTotal();\n    this.carrinhoService.adicionarProdutoAoCarrinho(produto);\n  }\n  limparCarrinho() {\n    this.carrinho = [];\n  }\n}\nCarrinhoService.ɵfac = function CarrinhoService_Factory(t) {\n  return new (t || CarrinhoService)();\n};\nCarrinhoService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CarrinhoService,\n  factory: CarrinhoService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAKA,OAAM,MAAOA,eAAe;EAG1BC;IADA,aAAQ,GAAU,EAAE;EACL;EAEfC,0BAA0B,CAACC,OAAY;IACrC;IACA,IAAI,CAACC,QAAQ,CAACC,IAAI,CAACF,OAAO,CAAC;EAC7B;EAEAG,uBAAuB;IACrB;IACA,OAAO,IAAI,CAACF,QAAQ;EACtB;EAEAG,mBAAmB,CAACJ,OAAgB;IAClC,MAAMK,cAAc,GAAG,IAAI,CAACC,eAAe,CAACN,OAAO,CAAC;IAEpD,IAAIK,cAAc,EAAE;MAClB;MACAA,cAAc,CAACE,UAAU,IAAI,IAAI,CAACC,qBAAqB;KACxD,MAAM;MACL;MACA,MAAMC,OAAO,GAAG;QAAE,GAAGT,OAAO;QAAEO,UAAU,EAAE,IAAI,CAACC;MAAqB,CAAE;MACtE,IAAI,CAACP,QAAQ,CAACC,IAAI,CAACO,OAAO,CAAC;;IAG7B;IACA,IAAI,CAACD,qBAAqB,GAAG,CAAC;IAE9B;IACA,IAAI,CAACE,QAAQ,EAAEC,IAAI,EAAE;IAErB;IACA,IAAI,CAACC,SAAS,GAAG,IAAI,CAACC,iBAAiB,EAAE;IACzC,IAAI,CAACC,UAAU,GAAG,IAAI,CAACC,kBAAkB,EAAE;IAC3C,IAAI,CAACC,eAAe,CAACjB,0BAA0B,CAACC,OAAO,CAAC;EAC1D;EAEAiB,cAAc;IACZ,IAAI,CAAChB,QAAQ,GAAG,EAAE;EACpB;;AAzCWJ,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAAqB,SAAfrB,eAAe;EAAAsB,YAFd;AAAM","names":["CarrinhoService","constructor","adicionarProdutoAoCarrinho","produto","carrinho","push","obterProdutosDoCarrinho","adicionarAoCarrinho","itemNoCarrinho","getCarrinhoItem","quantidade","quantidadeSelecionada","newItem","modalRef","hide","itenTotal","calcularItenTotal","precoTotal","calcularPrecoTotal","carrinhoService","limparCarrinho","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\gumal\\OneDrive\\Área de Trabalho\\malimpensa\\src\\app\\services\\carrinho.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CarrinhoService {\n\n  carrinho: any[] = [];\n  constructor() {}\n\n  adicionarProdutoAoCarrinho(produto: any) {\n    // Lógica para adicionar um produto ao carrinho\n    this.carrinho.push(produto);\n  }\n\n  obterProdutosDoCarrinho() {\n    // Retorna a lista de produtos no carrinho\n    return this.carrinho;\n  }\n\n  adicionarAoCarrinho(produto: Product) {\n    const itemNoCarrinho = this.getCarrinhoItem(produto);\n  \n    if (itemNoCarrinho) {\n      // Se o produto já estiver no carrinho, atualize a quantidade com base na quantidade selecionada\n      itemNoCarrinho.quantidade += this.quantidadeSelecionada;\n    } else {\n      // Se o produto não estiver no carrinho, crie um novo item no carrinho com a quantidade selecionada\n      const newItem = { ...produto, quantidade: this.quantidadeSelecionada };\n      this.carrinho.push(newItem);\n    }\n  \n    // Limpe a quantidade selecionada\n    this.quantidadeSelecionada = 1;\n  \n    // Feche o modal após adicionar ao carrinho\n    this.modalRef?.hide();\n  \n    // Atualize o preço total do carrinho\n    this.itenTotal = this.calcularItenTotal();\n    this.precoTotal = this.calcularPrecoTotal();\n    this.carrinhoService.adicionarProdutoAoCarrinho(produto);\n  }\n\n  limparCarrinho() {\n    this.carrinho = [];\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}